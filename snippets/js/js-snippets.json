{
    "OWL Template Component": {
        "prefix": "ooc",
        "body": [
            "/** @odoo-module **/",
            "\t",
            "import { registry } from '@web/core/registry';",
            "const { Component, useState, xml } = owl;",
            "\t",
            "export class $1 extends Component {",
            "\tsetup(){",
            "\t\tthis.state = useState({});",
            "\t}",
            "}",
            "\t",
            "$1.template = '${2:name_template}'",
            "registry.category('${3|fields,views,actions,effects,formatters,main_components,parsers,systray,user_menuitems|}').add('$2', $1);"
        ],
        "description": "OWL Template Component"
    },
    "Odoo Module": {
        "prefix": "oomodule",
        "body": [
            "/** @odoo-module **/"
        ],
        "description": "Define Odoo Module"
    },
    "Import Component": {
        "prefix": "ooimc",
        "body": [
            "const { Component } = owl;"
        ],
        "description": "Import Component"
    },
    "Import Component and useState": {
        "prefix": "ooimcs",
        "body": [
            "const { Component } = owl;",
            "const { useState } = owl.hooks;"
        ],
        "description": "Import Component and useState"
    },
    "Component": {
        "prefix": "ooc",
        "body": [
            "export class ${1:MyComponent} extends Component {",
            "\t$0",
            "}"
        ],
        "description": "Component"
    },
    "Component with Constructor": {
        "prefix": "oocc",
        "body": [
            "export class ${1:MyComponent} extends Component {",
            "\tconstructor(...args) {",
            "\t\tsuper(...args);",
            "\t\t$0",
            "\t}",
            "}"
        ],
        "description": "Component with Constructor"
    },
    "Component with Setup": {
        "prefix": "oocs",
        "body": [
            "export class ${1:MyComponent} extends Component {",
            "\tsetup() {",
            "\t\tsuper.setup();",
            "\t\t$0",
            "\t}",
            "}"
        ],
        "description": "Component with Setup"
    },
    "Setup": {
        "prefix": "oosetup",
        "body": [
            "setup() {",
            "\tsuper.setup();",
            "\t$0",
            "}"
        ],
        "description": "Setup"
    },
    "willStart": {
        "prefix": "oows",
        "body": [
            "async willStart() {",
            "\t$0",
            "}"
        ],
        "description": "willStart"
    },
    "mounted": {
        "prefix": "oom",
        "body": [
            "mounted() {",
            "\t$0",
            "}"
        ],
        "description": "mounted"
    },
    "willUpdateProps": {
        "prefix": "oowup",
        "body": [
            "async willUpdateProps(nextProps) {",
            "\t$0",
            "}"
        ],
        "description": "mounted"
    },
    "willPatch": {
        "prefix": "oowp",
        "body": [
            "willPatch() {",
            "\t$0",
            "}"
        ],
        "description": "willPatch"
    },
    "patched": {
        "prefix": "oopatch",
        "body": [
            "patched() {",
            "\t$0",
            "}"
        ],
        "description": "patched"
    },
    "willUnmount": {
        "prefix": "oowum",
        "body": [
            "willUnmount() {",
            "\t$0",
            "}"
        ],
        "description": "willUnmount"
    },
    "catchError": {
        "prefix": "ooce",
        "body": [
            "catchError(error) {",
            "\t$0",
            "}"
        ],
        "description": "catchError"
    },
    "useState": {
        "prefix": "oohus",
        "body": [
            "this.state = useState({ $1: $2 });"
        ],
        "description": "useState"
    },
    "useRef": {
        "prefix": "oohur",
        "body": [
            "this.ref = useRef('$1');"
        ],
        "description": "useRef"
    },
    "useContext": {
        "prefix": "oohoc",
        "body": [
            "this.context = useContext($1);"
        ],
        "description": "useContext"
    },
    "useStore": {
        "prefix": "oohust",
        "body": [
            "this.state = useStore((state) => state);"
        ],
        "description": "useStore"
    },
    "useDispatch": {
        "prefix": "oohud",
        "body": [
            "this.dispatch = useDispatch();"
        ],
        "description": "useDispatch"
    },
    "onMounted": {
        "prefix": "ooonm",
        "body": [
            "onMounted($1)"
        ],
        "description": "onMounted"
    },
    "onWillUnmount": {
        "prefix": "ooonwum",
        "body": [
            "onWillUnmount($1)"
        ],
        "description": "onWillUnmount"
    },
    "onWillPatch": {
        "prefix": "ooonwp",
        "body": [
            "onWillPatch($1)"
        ],
        "description": "onWillPatch"
    },
    "onPatched": {
        "prefix": "ooonp",
        "body": [
            "onPatched($1)"
        ],
        "description": "onPatched"
    },
    "onWillStart": {
        "prefix": "ooonws",
        "body": [
            "onWillStart($1)"
        ],
        "description": "onWillStart"
    },
    "onWillUpdateProps": {
        "prefix": "ooonwup",
        "body": [
            "onWillUpdateProps(nextProps => {",
            "\t$0",
            "});"
        ],
        "description": "onWillUpdateProps"
    }
}
